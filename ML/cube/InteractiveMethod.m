classdef InteractiveMethod < dynamicprops    
    %{ 
    Cube plugin class for interactive methods
    
    Description:
    ============
        - Base class for interactive methods
            * Method handle
            * Cell array of parameters, used to call the method
                * Parameters can be changed through a GUI (build with CubeInteractiveMethod.build_gui) or CLI prompt
    %}
    
    properties
       methodh = false;         % Method handle
       current = {};            % Current parameter values   % Reflect changes to parameters (e.g. ~ orthofig) in CubePostprocess instances!
       default = {};            % Default method handle
    end
    
    properties(Hidden = true)
        parname = {};           % Used in GUI and CLI to identify parameters. If CubeInteractiveMethod.methodh is an
                                % anonymous function, the parname array can be autogenerated from that.
                                % To save space, use uicontrol.TooltipString maybe! https://nl.mathworks.com/matlabcentral/answers/81373-how-to-add-mouseover-in-gui
        options = {};           % Additional options (required? not sure...)
        expects = @single;      % Expected input data type
        
        gui_height = 20;
        gui_max_width = 160;
    end
    
    methods(Access = protected)
        function self = CubeInteractiveMethod(methodh, default, options, expects)
            self.methodh = methodh;         % Should perform checks!
            self.default = default;
            self.current = self.default;
            self.options = options;
        end
        
        function gui_handles = build_gui(self, figure, anchor)
            % Build own GUI @anchor in figure
            % ALSO: implement callbacks ~ this gui
        end
        
        function cli_prompt(self)
            % Prompt own parameters in the MATLAB commandline
        end
        
        function get_parname(self)
            % Get parname array from anonymous function definition in self.methodh
        end
    end
end